@model UltraBudget2.Models.BudgetDao;
@using UltraBudget2.Extensions;

@{
    ViewData["Title"] = "Budget";
    var categorySelectList = (List<SelectListItem>)TempData["Categories"];
    var accountSelectList = (List<SelectListItem>)TempData["Accounts"];
    var masterCategories = (List<MasterCategory>)TempData["MasterCategories"];
    var subCategories = masterCategories.SelectMany(s => s.SubCategories);
    var budgets = subCategories.SelectMany(s => s.Budgets);
    var amountMonths = 3;
    var rowWidthPercentage = 75 / amountMonths;
}

<div id="wrapper" style="height: 100%; display: flex; flex-flow: column wrap; width: 100%; border: dashed grey;">
    <div id="header" style="display: flex; flex-flow: row wrap; border: dashed red; width: 100%; height: 20%;">
        <div style="border: 1px solid grey; width: 25%;">
        </div>
        @for (int i = 0; i < amountMonths; i++)
        {
            var thisMonth = DateTime.Now;
            var activeMonthDateTime = thisMonth.AddMonths(i).GetFirstDayOfMonth();
            var activeMonthName = activeMonthDateTime.ToString("MMMM");
            var budgetsThisMonth = budgets.Where(b => b.Month == activeMonthDateTime);
            var budgeted = budgetsThisMonth != null ? 0 : budgetsThisMonth.Sum(b => b.Balance);
            <div style="border: 1px solid grey; width: 25%;">
                <p>
                    @activeMonthName @activeMonthDateTime.Year <br />
                    Not spent in @activeMonthName <br />
                    Overspent in @activeMonthName <br />
                    Income for @activeMonthName <br />
                    Budgeted for @activeMonthName: @budgeted <br />
                    0 <br />
                    Available to budget <br />
                </p>
            </div>
        }
        <div style="border: 1px solid grey; width: 25%;">
        </div>
        @for (int i = 0; i < amountMonths; i++)
        {
            var thisMonth = DateTime.Now;
            var activeMonthDateTime = thisMonth.AddMonths(i).GetFirstDayOfMonth();
            var thisMonthBudgets = budgets.Where(b => b.Month == activeMonthDateTime);
            var thisMonthBudget = thisMonthBudgets == null ? 0 : thisMonthBudgets.Sum(s => s.Balance);
            var thisMonthOutflows = Model.Transactions.Where(t => t.DateTime.Year + t.DateTime.Month == activeMonthDateTime.Year + activeMonthDateTime.Month).Sum(s => s.Amount);
            var thisMonthBalance = thisMonthBudget - thisMonthOutflows;
            <div style="display:flex; flex-flow: row wrap; border: 1px solid grey; width: 25%;">
                <div style="flex-grow:1;">
                    <p>
                        Budgeted <br />
                        @thisMonthBudget <br />
                    </p>
                </div>
                <div style=" flex-grow:1;">
                    <p>
                        Outflows <br />
                        @thisMonthOutflows <br />
                    </p>
                </div>
                <div style="flex-grow:1;">
                    <p>
                        Balance <br />
                        @thisMonthBalance <br />
                    </p>
                </div>
            </div>
        }
    </div>
    <div id="inputrows" style="display: flex; flex-flow: column; border: dashed yellow;">
        @foreach (var category in masterCategories)
        {
            <div style="display: flex; flex-flow: row wrap; background-color: lightsteelblue;">
                <div style="width: 25%;">
                    @category.Name
                </div>
                @for (int i = 0; i < amountMonths; i++)
                {
                    <div style="border: 1px solid lightgrey; border-width: 0px 0px 0px 1px; width:25%;">
                    </div>
                }
            </div>
            @foreach (var subCategory in category.SubCategories)
            {
                <div style="display: flex; flex-flow: row wrap; border: 1px solid lightgrey; border-width: 1px 0px 0px 0px;">
                    <div style="width: 25%;">
                        @subCategory.Name
                    </div>
                    @for (int i = 0; i < amountMonths; i++)
                    {
                        var thisMonth = DateTime.Now.AddMonths(i).GetFirstDayOfMonth();
                        var id = category.Id.ToString() + '_' + subCategory.Id + '_' + thisMonth.ToString("yyyyMM");
                        var budgetsThisMonth = subCategory.Budgets.Where(b => b.Month == thisMonth).ToList();
                        var budgeted = budgetsThisMonth == null ? 0m : budgetsThisMonth.Sum(b => b.Balance);

                        <div style="display: flex; flex-flow: row; border: 1px solid lightgrey; border-width: 0px 0px 0px 1px; width:25%;">
                            <div style="flex: 1 1 0;">
                                <input id="@id" type="number" onchange="onBudgetInputChange(this)" placeholder="@budgeted" />
                            </div>

                            <div style="flex: 1 1 0; border: 1px solid lightgrey; border-width: 0px 0px 0px 1px;">

                            </div>

                            <div style="flex: 1 1 0; border: 1px solid lightgrey; border-width: 0px 0px 0px 1px;">

                            </div>

                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

<script>
    function onBudgetInputChange(selectedInput) {
        var url = '/Home/UpdateBudget';
        $.ajax({
            type: "POST",
            url: url,
            data: { id: selectedInput.id, value: selectedInput.value },
            //success: function () {
            //    location.reload();
            //}
        })
    }
</script>